import java.util.Scanner;
import java.util.Objects;

class HeapBstNodeModel {
    private int value;
    private int priority;
    private HeapBstNodeModel parent;
    private HeapBstNodeModel left;
    private HeapBstNodeModel right;

    public HeapBstNodeModel(int value, int priority) {
        this.value = value;
        this.priority = priority;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        HeapBstNodeModel that = (HeapBstNodeModel) o;

        if (value != that.value) return false;
        if (priority != that.priority) return false;
        if (!Objects.equals(left, that.left)) return false;
        return Objects.equals(right, that.right);
    }

    @Override
    public int hashCode() {
        int result = value;
        result = 31 * result + priority;
        return result;
    }

    public int getValue() {
        return value;
    }

    public HeapBstNodeModel getParent() {
        return parent;
    }

    public void setParent(HeapBstNodeModel parent) {
        this.parent = parent;
    }

    public void setValue(int value) {
        this.value = value;
    }

    public int getPriority() {
        return priority;
    }

    public void setPriority(int priority) {
        this.priority = priority;
    }

    public HeapBstNodeModel getLeft() {
        return left;
    }

    public void setLeft(HeapBstNodeModel left) {
        this.left = left;
    }

    public HeapBstNodeModel getRight() {
        return right;
    }

    public void setRight(HeapBstNodeModel right) {
        this.right = right;
    }
}

class TreeHeapBstModel {
    private HeapBstNodeModel rootNode;

    public void add(int value, int priority) {
        HeapBstNodeModel node = new HeapBstNodeModel(value, priority);

        if (rootNode == null) { //Árvore vazia.
            rootNode = node;
        } else if (priority > rootNode.getPriority()) { //Caso o Nó tenha uma prioridade maior que o nó raiz.
            if (value > rootNode.getValue())
                node.setLeft(rootNode);
            else
                node.setRight(rootNode);

            rootNode.setParent(node);

            rootNode = node;
        } else {
            HeapBstNodeModel currentNode = rootNode;

            while (true) {
                if (priority > currentNode.getPriority()) {
                    HeapBstNodeModel rightNode = currentNode.getRight();
                    HeapBstNodeModel leftNode = currentNode.getLeft();
                    HeapBstNodeModel parentNode = currentNode.getParent();

                    node.setParent(parentNode);

                    if (value > currentNode.getValue()) {
                        if (rightNode == null || value > rightNode.getValue()) {
                            node.setLeft(currentNode);
                        } else {
                            node.setLeft(currentNode);
                            node.setRight(currentNode.getRight());
                            currentNode.setRight(null);
                        }
                    } else {
                        if (leftNode == null || value < leftNode.getValue()){
                            node.setRight(currentNode);
                        } else {
                            node.setRight(currentNode);
                            node.setLeft(currentNode.getLeft());
                            currentNode.setLeft(null);
                        }
                    }

                    if (parentNode.getRight() != null && parentNode.getRight().equals(currentNode))
                        parentNode.setRight(node);
                    else
                        parentNode.setLeft(node);

                    currentNode.setParent(node);
                    break;
                } else {
                    if (value > currentNode.getValue()) {
                        if (currentNode.getRight() == null) {
                            node.setParent(currentNode);
                            currentNode.setRight(node);
                            break;
                        } else {
                            currentNode = currentNode.getRight();
                        }
                    } else {
                        if (currentNode.getLeft() == null) {
                            node.setParent(currentNode);
                            currentNode.setLeft(node);
                            break;
                        } else {
                            currentNode = currentNode.getLeft();
                        }
                    }
                }
            }
        }
    }

    public String customToString(HeapBstNodeModel node) {
        if (node == null) return "";

        return "(" + customToString(node.getLeft()) + ((char) node.getValue()) + "/" + node.getPriority() + customToString(node.getRight()) + ")";
    }

    @Override
    public String toString() {
        return customToString(rootNode);
    }
}


class Main {
    private static final Scanner read = new Scanner(System.in);

    public static void main(String[] args) {
        StringBuilder output = new StringBuilder();

        while(true) {
            int inputs = read.nextInt();

            if (inputs == 0) break;

            TreeHeapBstModel treeHeapBstModel = new TreeHeapBstModel();
            for (int i = 0;i < inputs;i++) {
                String input = read.next();

                String[] values = input.split("/");

                treeHeapBstModel.add(values[0].charAt(0), Integer.parseInt(values[1]));
            }

            output.append(treeHeapBstModel).append("\n");
        }

        System.out.print(output);
    }
}
